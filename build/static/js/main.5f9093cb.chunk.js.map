{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["todoItems","id","title","description","completed","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayCompleted","status","setState","viewCompleted","renderTabList","react_default","a","createElement","className","onClick","state","renderItems","todoList","filter","item","map","key","concat","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MACMA,EAAY,CAChB,CACEC,GAAI,EACJC,MAAO,eACPC,YAAa,oCACbC,WAAW,GAEb,CACEH,GAAI,EACJC,MAAO,QACPC,YAAa,sDACbC,WAAW,GAEb,CACEH,GAAI,EACJC,MAAO,gBACPC,YAAa,sCACbC,WAAW,GAEb,CACEH,GAAI,EACJC,MAAO,UACPC,YAAa,gDACbC,WAAW,IAiFAC,cA7Eb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAMRQ,iBAAmB,SAAAC,GACjB,OAAIA,EACKR,EAAKS,SAAS,CAAEC,eAAe,IAEjCV,EAAKS,SAAS,CAAEC,eAAe,KAXrBV,EAanBW,cAAgB,WACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,QACEE,QAAS,kBAAMhB,EAAKO,kBAAiB,IACrCQ,UAAWf,EAAKiB,MAAMP,cAAgB,SAAW,IAFnD,YAMAE,EAAAC,EAAAC,cAAA,QACEE,QAAS,kBAAMhB,EAAKO,kBAAiB,IACrCQ,UAAWf,EAAKiB,MAAMP,cAAgB,GAAK,UAF7C,gBAtBaV,EA+BnBkB,YAAc,WAAM,IACVR,EAAkBV,EAAKiB,MAAvBP,cAIR,OAHiBV,EAAKiB,MAAME,SAASC,OACnC,SAAAC,GAAI,OAAIA,EAAKxB,WAAaa,IAEZY,IAAI,SAAAD,GAAI,OACtBT,EAAAC,EAAAC,cAAA,MACES,IAAKF,EAAK3B,GACVqB,UAAU,qEAEVH,EAAAC,EAAAC,cAAA,QACEC,UAAS,mBAAAS,OACPxB,EAAKiB,MAAMP,cAAgB,iBAAmB,IAEhDf,MAAO0B,EAAKzB,aAEXyB,EAAK1B,OAERiB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAAlB,UACAH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAlB,gBAjDNf,EAAKiB,MAAQ,CACXP,eAAe,EACfS,SAAU1B,GAJKO,wEAyDjB,OACEY,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8CAAd,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAlB,aAEDZ,KAAKQ,gBACNC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,+BACXZ,KAAKe,0BArEJO,aCfEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5f9093cb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nconst todoItems = [\r\n  {\r\n    id: 1,\r\n    title: \"Go to Market\",\r\n    description: \"Buy ingredients to prepare dinner\",\r\n    completed: true\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Study\",\r\n    description: \"Read Algebra and History textbook for upcoming test\",\r\n    completed: false\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Sally's books\",\r\n    description: \"Go to library to rent sally's books\",\r\n    completed: true\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Article\",\r\n    description: \"Write article on how to use django with react\",\r\n    completed: false\r\n  }\r\n];\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewCompleted: false,\r\n      todoList: todoItems\r\n    };\r\n  }\r\n  displayCompleted = status => {\r\n    if (status) {\r\n      return this.setState({ viewCompleted: true });\r\n    }\r\n    return this.setState({ viewCompleted: false });\r\n  };\r\n  renderTabList = () => {\r\n    return (\r\n      <div className=\"my-5 tab-list\">\r\n        <span\r\n          onClick={() => this.displayCompleted(true)}\r\n          className={this.state.viewCompleted ? \"active\" : \"\"}\r\n        >\r\n          complete\r\n        </span>\r\n        <span\r\n          onClick={() => this.displayCompleted(false)}\r\n          className={this.state.viewCompleted ? \"\" : \"active\"}\r\n        >\r\n          Incomplete\r\n        </span>\r\n      </div>\r\n    );\r\n  };\r\n  renderItems = () => {\r\n    const { viewCompleted } = this.state;\r\n    const newItems = this.state.todoList.filter(\r\n      item => item.completed == viewCompleted\r\n    );\r\n    return newItems.map(item => (\r\n      <li\r\n        key={item.id}\r\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n      >\r\n        <span\r\n          className={`todo-title mr-2 ${\r\n            this.state.viewCompleted ? \"completed-todo\" : \"\"\r\n          }`}\r\n          title={item.description}\r\n        >\r\n          {item.title}\r\n        </span>\r\n        <span>\r\n          <button className=\"btn btn-secondary mr-2\"> Edit </button>\r\n          <button className=\"btn btn-danger\">Delete </button>\r\n        </span>\r\n      </li>\r\n    ));\r\n  };\r\n  render() {\r\n    return (\r\n      <main className=\"content\">\r\n        <h1 className=\"text-white text-uppercase text-center my-4\">Todo app</h1>\r\n        <div className=\"row \">\r\n          <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\r\n            <div className=\"card p-3\">\r\n              <div className=\"\">\r\n                <button className=\"btn btn-primary\">Add task</button>\r\n              </div>\r\n              {this.renderTabList()}\r\n              <ul className=\"list-group list-group-flush\">\r\n                {this.renderItems()}\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';       // add this\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}